<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Icemelon]]></title>
  <link href="http://ice-melon.github.io/atom.xml" rel="self"/>
  <link href="http://ice-melon.github.io/"/>
  <updated>2013-09-01T11:38:54+08:00</updated>
  <id>http://ice-melon.github.io/</id>
  <author>
    <name><![CDATA[icemelon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[为octopress添加侧栏分享工具]]></title>
    <link href="http://ice-melon.github.io/blog/2013/08/31/wei-octopresstian-jia-ce-lan-fen-xi-gong-ju/"/>
    <updated>2013-08-31T01:18:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/08/31/wei-octopresstian-jia-ce-lan-fen-xi-gong-ju</id>
    <content type="html"><![CDATA[<p>Ocotopress 已经集成了twitter，脸书等第三方分析链接，只要在_config.yml里配置能搞定。但墙内没人用这些啊，怎么才能高大上？不慎写了鸡汤文读者要分分钟分享到朋友圈才行，吟诗调侃了薛必群老财主读者能够转到weibo里。如果还有小众读者觉得博主写得好想分享到有道笔记等网站，博主也要贴心服务满足读者需求才行。</p>

<p>在<a href="http://meditic.com/game-of-wild-beast/">meditic</a>的博客里发现了<a href="http://www.jiathis.com/">jiathis</a>这个工具，很全面，里面还有你找不到的分享平台吗？话不多说过程如下。</p>

<p>首先嵌入jiathis的代码，修改<code>source/_include/post/sharing.html</code>，在最后一行的<code>&lt;/div&gt;</code>前加入如下代码</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://v3.jiathis.com/code/jiathis_r.js?uid=1374762077227410&amp;move=0&quot;</span>
</span><span class='line'> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在_config.yml中添加jiathis，在文件末尾添加就可</p>

<pre><code>#jianthis
jianthis:true
</code></pre>

<p>以后不想开分享只要改成false就可。</p>

<p>试了jiathis几种分析方式，只有这个能不改代码完美契合octopress的布局，而且分享图标也最为清爽，不建议再去jianthis网站定制。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有迹可循]]></title>
    <link href="http://ice-melon.github.io/blog/2013/08/28/you-ji-ke-xun/"/>
    <updated>2013-08-28T22:32:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/08/28/you-ji-ke-xun</id>
    <content type="html"><![CDATA[<p>大学毕业2个月了，十几年来算是第一次跳出学校这个笼子。毕业前一个月辞去了某私募基金的职位。宿舍4人除了1人在某知名垄断IT巨头那拿着高薪玩着游戏之外，剩下3人都已先后辞职。除了我另外两位都找了下家，单纯看待遇环境等硬性因素甚至不如之前的职位，然而可能因为离梦想的距离更近些，对爱情的期望更真切些，他们心中的天平发生了倾斜，都是有想法的人。</p>

<p>我在大学生活里没对CS进行精深的学习，然而学的还算系统，基础比较牢靠。我在学校并没有花很多时间对编程进行实践，而是花了很大的精力在金融市场投机。大二上了一门证券投资相关的选修课就开始做股票，有幸见证了中国史上第二大熊市。大三开始接触股指期货，并在摸索中找到了一些有迹可循的规律，并胆大勤奋的检验这些规律，优化自己的交易模式。为什么说自己胆大？因为1手的股指期货保证金就要10多万，价格跳1个点就是300元的收益波动，这对不是富二代的学生来说绝对不是小数目。为什么又厚脸皮的说自己勤奋呢？因为为了尽快理解市场，检验交易依据，我一个交易日进出几十回，这是非常高频的短线交易手法，交易时间里需要极度的专注。在连续的3个月里我不放过任何交易时间，在纸上记录错误以及挖掘新的规律，用于记录的A4纸加起来有十几厘米厚。每天晚上我还得复盘、看合约持仓、整理白天在纸上的记录、制定明天的交易计划。与此同时还要应付不算轻松的专业课程。很荣幸，3个月后我没在市场里死亡，但因为连续久坐不动得了肩周炎，坚持跑了半个月步才缓解。</p>

<p>觉得交易稳定后我去配资了，一句话攻略就是借高利贷扩大交易杠杆，以获得更大收益。别忘了风险也极度增加了，杠杆到了1：50的夸张地步。事实证明了不作死就不会死这颠扑不破的真理，由于技艺、心理等各方面原因被市场教训了。之后经历了绑大腿找工作、辞职等一系列经历。很欣慰的是家人和女友都比较理解我，没嫌弃我这失业青年，在蛋大表格上我因该是被就业了，也算离校前为学校做了最后一点点的贡献。</p>

<p>一直没有去回顾思考这段一个人的交易经历，有点逃避失败这个事实。交易很大程度上是自己和自己的死磕，在混沌的市场中找到可以信赖的依据来支持自己的交易。这些依据说白了就是某些情况下的大概率事件，只要概率大于50%就都有套利的机会。依据有很多，比如价量关系、现货与期货关系、k线组合等。前不久光大乌龙指事件中我午间休盘时看了眼分时图，依靠以往的经验判断出这不是一般的拉升，并且一定持续不久，下午回吐涨幅的可能很大。这话是在微信群里事前说的，下午就爆出光大事件，指数回落。要是配资后让我碰到这一天也许我会在市场活的更久些吧，但我觉得我终究会放弃交易员这个职业，因为光对金钱的渴望很难抵消随着资金量扩大而产生的更大的压力，我没有信念忍受这个行当里的寂寞和痛苦。而且我认为短线交易就是一种模式识别，自动化交易或许更适合这样的交易方式，人在精确度上的把握一定没软件高，而且软件可以依靠多种策略进行多进程多品种交易。但调教软件不比调教人简单，略过不表，这是华尔街的矿工（quant）们干的事情。单干程序化交易不比人肉交易压力小。</p>

<p>在金融衍生品市场尚有人找到大概率事件的规律，并严格遵循这些交易纪律在市场活下去，二十几岁月入千万是存在的现实。我相信在其它行业里也一定存在一些规律，只不过时间跨度被大大拉长，不能被立刻检验罢了。写到这突然感觉中医很像交易，中医是在数千年间医者们总结的规律，你很难去量化中医，而且我觉得拿量化的思维去评价中医这方式是错误的。但社会上存在太多中医骗子打着幌子捞钱，网上也随处可见养生之类的文章，你很难去评判真假，有人去打假就去打吧，也不是没好处。</p>

<p>说说IT界的规律，百度前段时间推出了lightApp这概念。实际上谷歌早实现了单位转换等功能，加几个公共接口也就是lightApp了，但谷歌是制定行业标准的公司，平台对谷歌来说没那么重要。而百度腾讯等公司就要制定平台，最好是个闭环，用户在我这环里你转啊转，腾百就可以一直揩用户油，活的就能很滋润。百度的<a href="http://developer.baidu.com/report#trend">移动互联网发展趋势</a>里分析了用户行为，并根据长尾效应制定了这个LightApp这个战略。各类科技媒体上关于LightApp的分析大多都是根据这个报告添油加醋写的。我一直坚信绝大多数科技撰稿人和股评家的姿势水平差不多，写稿子混饭吃，恨不得给微博公司餐补上调这事分析个十几条理由证明微博公司钱途无量。信股评家买股票顶多亏钱，创业者盲目信科技评论人的话去瞎创业就是浪费生命！长尾效应很值得看，亚马逊、谷歌、淘宝一定程度上都遵从这规律，怎么就没科技撰稿人翻译长尾效应的维基词条呢。高达上空的大规律大境界不谈了，说说小而美的。其实也不小，说说91被收购和小米估值100亿(估值绝对偏低啊，对比A股某手机游戏公司市盈率350！)。91干的事情就是预装软件，建立应用分发渠道，91是被百度收购的，联想LightApp作用，百度是想统治移动端软件分发拿被微信拿烂的船票？搜索lightApp和船票关键词发现没什么内容，这个词终于烂到家了。扯多了，91干的这事情有没有很熟悉？盗版xp时代的霸主雨林木风不就干了这票事，思路如出一辙，可惜被进击的微软搞了。最后创始人去做了115网盘，居然错过了移动
互联网这浪潮。小米手机是什么思路呢，PC思路，制造性价比最高的手机是王道。这也被说烂了，但规律真真切切的存在，而且时间跨度越大的规律越难把握，就像学会炒个鸡蛋很简单，2分钟的事情，但像做外脆里嫩的烤乳猪的方法就很难掌握了，能做好烤乳猪绝对能成为一家饭店的金字招牌。又扯到吃了，饱暖思淫欲，那就像撸管很快很干脆很简单，但和谐的做爱其实是一件需要练习的事情，要找到双方平衡的规律才能幸福。</p>

<p>写代码中的规律也多，同样一个问题有人用复杂的多重循环解决，有人却能用简介的递归漂亮的解决问题。有人很会善用stackoverflow、github解决编程难题，有人能很迅速地查阅理解官方文档搞定问题。任何事情都有规律，掌握之后再去做会事半功倍，但一个人用心的做事努力实践才能发现这些规律，由小到大，利用规律实现自己的价值，为社会创造价值。</p>

<p>我最近对自己的期望就是能写出ios以及MAC端优秀的应用。因为随着ios的普及，人们已经习惯了OS X的设计理念。用户已经可以逐渐摆脱windows那一套复杂的应用管理方式。Mac作为全地球最出色的个人电脑也绝对会在中国满满普及，买mac装windows的情况也会越来越少。然而mac端却缺少一些优秀的适合中国的软件。已经有些IT公司意识到了这点，像虾米音乐mac版绝对是音乐软件精品中的精品。射手影音给MPlayer套了个壳在应用商店卖的非常火热。而且中国也缺乏steam这样全平台的游戏平台，随着市场的成熟这些早晚都会有的，我就斗胆在此预测下。</p>

<p>发现工作生活中的规律，并利用互联网体现自己的个人价值，这就是我待业两个月来形成的价值观。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[objective-c中protocol的运用]]></title>
    <link href="http://ice-melon.github.io/blog/2013/08/27/objectivtocolde-yun-yong/"/>
    <updated>2013-08-27T21:30:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/08/27/objectivtocolde-yun-yong</id>
    <content type="html"><![CDATA[<h2>protocol是什么</h2>

<p>不废话放大招，protocol一句话攻略：</p>

<pre><code>等于JAVA中的interface
</code></pre>

<p><a href="https://developer.apple.com/library/mac/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/WorkingwithProtocols/WorkingwithProtocols.html">Mac Developer Library</a> 上的精炼解释：</p>

<p>A class interface declares the methods and properties associated with that class.
A protocol, by contrast, is used to declare methods and properties that are independent of any specific class.</p>

<p>像C++和Ruby都实现了多重继承，既一个class能拥有多个superclass；而objective-c和java等语言中的class只能严格拥有一个superclass类。在objective-c中我们用<code>@protocal</code>来实现多重继承的能力。
语法直接看<a href="https://developer.apple.com/library/mac/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/WorkingwithProtocols/WorkingwithProtocols.html">Mac Developer Library 上的定义</a>，苹果写档里通过一个律师事务所的例子把为什么要在面向对象语言中实现protocol原因给讲清楚了，文档也oop！</p>

<h2>用protocol实现view与controll的通信</h2>

<p>view和control是不能直接通信的，要使用delegate方法。题外话google了关于mvc的图片，大部分都是有错误的，很多图居然在view和model间直接加了箭头。</p>

<p>例如在 view：FaceView和control：FaceViewControl中，我们要在FaceView中取得一个只存在于FaceViewControl中的数据。view中是不能存数据的，我们也不能为control定义公有方法直接拿，而是要为view定义一个protocol，让control实现这个protocol从而实现delegate。
详细过程如下：</p>

<p>首先在FaceView.h中我们可以这么定义</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@class</span> <span class="nc">FaceView</span>;
</span><span class='line'>
</span><span class='line'><span class="k">@protocol</span> <span class="nc">FaceViewDataSource</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="nf">smileForFaceView:</span><span class="p">(</span><span class="n">FaceView</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">FaceView</span> : <span class="nc">UIView</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="kt">id</span> <span class="o">&lt;</span><span class="n">FaceViewDataSource</span><span class="o">&gt;</span> <span class="n">dataSource</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>@class有什么意义呢？在smileForFaceView方法中的参数(FaceView *)sender是一个指向FaceView对象的指针。但是FaceView是未定义的对象名，由于objective-c是c的拓展，c中用到的所有自定义类型都得在之前定义过，所以得用@class先向compiler声明程序会在后面实现FaceView这个对象。
protocol中的方法将FaceView自己作为参数，返回一个float的返回值。而且在@inferface里面定义了一个类型为id的叫dataSource的@property，dataSource还实现了FaceViewDataSource这个protocol。所以dataSource实际上就是control，control中实现了smileForFaceView这个方法。我们就可以再FaceView.m里面通过</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">float</span> <span class="n">haha</span> <span class="o">=</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">dataSource</span> <span class="nl">smileForFaceView:</span><span class="n">self</span><span class="p">]</span><span class="err">；</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的方式来获取control中的信息。</p>

<p>而后我们需要在FaceViewControl.m中实现一个FaceView的property，并且将Faceview中的dataSource设为FaceViewControl自己；</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">interface</span> <span class="n">HappinessViewController</span><span class="p">()</span> <span class="o">&lt;</span><span class="n">FaceViewDataSource</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">FaceView</span> <span class="o">*</span><span class="n">faceView</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">HappinessViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">faceView</span> <span class="o">=</span> <span class="n">_faceView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setFaceView:</span><span class="p">(</span><span class="n">FaceView</span> <span class="o">*</span><span class="p">)</span><span class="nv">faceView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_faceView</span> <span class="o">=</span> <span class="n">faceView</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">faceView</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后别忘了在storyboard中将FaceViewControl与Faceview链接起来，不然control不会知道FaceView对象在哪里，双方就没办法通信。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pick a random element from a long array]]></title>
    <link href="http://ice-melon.github.io/blog/2013/08/24/pick-a-random-element-from-a-long-array/"/>
    <updated>2013-08-24T22:53:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/08/24/pick-a-random-element-from-a-long-array</id>
    <content type="html"><![CDATA[<p>Suppose you have an array of n elemnets and you have to pick an element randomly. It is easy that you just pick each element with probability 1/n.</p>

<p>While if you don&rsquo;t know the size of the array, you receive the element one at a time. How to pick the element? In theory you could wait for all elements to come and compute the probility. But the stream may be too large to be stored in memory, which makes it infeasible. We want an algorithm that we do not have to store the elements and look at the elements twice.</p>

<p>Here comes the solution:</p>

<pre><code>1.Choose the first element with probability 1
2.Replace the first element with the second element, with probability 1/2
3.Replace the current element with the third element, with probability 1/3
4.Continue doing this until the stream ends.
</code></pre>

<p>Let&rsquo;s prove the correctness by induction:</p>

<p>Suppose that after seeing n-1 elements, each of the first n-1 elements is chosen with equal probability.<br/>
When you see the nth element, it is chosen with probability 1/n, and each of the other elements is chosen
with probability [1/(n-1)] * [(n-1) / n] = 1/n. Therefore all elements are chosen with equal probability.</p>

<p>The algorithm takes O(1) space and O(n) time, which is quite simple and beautiful.
For more information, see <a href="http://en.wikipedia.org/wiki/Reservoir_sampling">Reservior sample</a> on Wikipedia.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[People don’t buy what u do,they buy why U do]]></title>
    <link href="http://ice-melon.github.io/blog/2013/08/08/people-dont-buy-what-u-do-they-buy-why-u-do/"/>
    <updated>2013-08-08T23:03:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/08/08/people-dont-buy-what-u-do-they-buy-why-u-do</id>
    <content type="html"><![CDATA[<p>Several days ago, I waked up at 6 am and happened to watch a TED talk <a href="http://blog.ted.com/2010/05/04/how_great_leade/">&ldquo;How great leaders inspire action&rdquo;</a>. I was attracted by the speaker&rsquo;s terse idea and comfortable articulate  pronunciation.</p>

<p>The speaker,<a href="http://www.twitter.com/simonsinek">Simon Sinek</a>, is a brilliant marketing consultant and author of <a href="http://www.amazon.com/Start-Why-Leaders-Inspire-Everyone/dp/1591842808?tag=jasonwiener-20">Start of Why</a>. He believes  that all great organizations think, act, and communicate in the exact same way — and this is opposite of how most of us think, act, and communicate. He believes great companies and leaders communicate and inspire with a methodology he calls The Golden Circle.</p>

<p>Here is the example of Golden Circle.</p>

<blockquote><p>  If Apple were like everyone else their marketing message would be, “We make great computers. They are beautifully designed, simple to use, and user-friendly. Want to buy one?”</p>

<p>  However, this is how Apple actually communicates, “In everything we do we believe in challenging the status quo. We believe in thinking differently. The way we challenge the status quo is by making our products beautifully designed, simple to use, and user-friendly. We just happen to make great computers. Want to buy one?”</p></blockquote>

<p><img src="http://t1.baidu.com/it/u=1276415570,1783171753&amp;fm=21&amp;gp=0.jpg" title="Logo 1" alt="" /></p>

<p>Every person  knows <em>what</em> they do and some people know <em>how</em> to do it better, which may be service and skill. But only very few know <em>why</em> they do what they do. As the golden circle diagram showed, all great organizations
and people think inside out the diagram.</p>

<p>The goal is not to do business with people need what you have. The goal is to do business with people believe with what you believe. The first 2.5% of population are innovators; The next 13.5% people are early adopters.
The propagation law tells us if you want mass-market success or mass-market acceptance of  an idea, you can&rsquo;t have it until you achieve the tipping poin between 15% and 18%. Most of population just follow what others do.</p>

<p>When first generation of iphone came out, why so many people wait many hours to buy a iphone? Because these people believe what Apple believes. The innovators and early adoptors feel comfortable to make intuitive decisions that are driven by what their believe about the world and not just what product is available.</p>

<p>Recommend to watch the <a href="http://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action.html">talk</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sublime text2 build 设置]]></title>
    <link href="http://ice-melon.github.io/blog/2013/08/07/sublime-text2-build-she-zhi/"/>
    <updated>2013-08-07T18:11:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/08/07/sublime-text2-build-she-zhi</id>
    <content type="html"><![CDATA[<p>sublime text2 是一款优秀的编辑器，在mac，linux，window平台上都能用。sublime平台拥有很多优秀的插件，而且安装非常方便。</p>

<pre><code>command + shift+ p
</code></pre>

<p>能够召唤出强大无比的命令行，让你摆脱鼠标，摆脱一大波需要记的快捷键。官方网站上有<a href="https://tutsplus.com/course/improve-workflow-in-sublime-text-2/">视频教程</a>，教程看起来非常赏心悦目，是的，赏心悦目。</p>

<p>Mac平台下sublime没有预设C的build配置，虽然直接用C++（据说国内某大型清新约炮网站有一程序萌妹子，人称C++）编译也行，但总归不舒服。stackoverflow等社区也没现成的方法，遂查了下sublime的<a href="http://docs.sublimetext.info/en/latest/reference/build_systems.html">build配置方法</a>,是熟悉的JSON结构。</p>

<p>下面是mac下面编译与运行一起执行的配置方法，并且能使编译时的错误一起到sublime里。</p>

<pre>
{
    "cmd" : ["gcc",  "-o", "$file_base_name", "$file_name"],
    "selector" : "source.c",
    "shell" : false,
    "working_dir" : "$file_path"
}
</pre>


<p>cmd就是执行的命令。尝试用</p>

<pre><code>gcc -o test test.c &amp;&amp; ./test
</code></pre>

<p>来编译和运行，发现sublime无法对&amp;&amp;进行解析。之后尝试使用两个cmd指令，发现只有第二个cmd是有效的。所以光配置sublime是无法达到一个build同时完成编译和运行的任务。要达成这个目的得翻阅zsh的文档自己写个能传参的命令，并且能输出gcc编译的结果和代码运行结果。
selector属性是选择自动build时候，当文件后缀是.c的时候自动选择这个build文件。</p>

<p>顺便记下windows平台下配置方法,还没测试过。</p>

<pre>
{
  "cmd" : ["gcc", "$file_name", "-o", "${file_base_name}.exe", "&&", "${file_base_name}.exe"],
  "selector" : "source.c",
  "shell" : true,
  "working_dir" : "$file_path"
}
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何快速学习markdown写博客]]></title>
    <link href="http://ice-melon.github.io/blog/2013/07/29/test/"/>
    <updated>2013-07-29T23:07:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/07/29/test</id>
    <content type="html"><![CDATA[<p>花了一个小时用octopress搭建了blog,托管在github之上。网上有很多在github上的搭建blog的教程，好处是不用自己租服务器,速度也能得到保证。octopress还有很多<a href="http://opthemes.com/">主题</a>，使用起来非常方便，几句命令就能搞定。octopress对屏幕大小适应性非常强，我尝试不断调整页面大小，blog的排版一直很优秀，一些UI的小细节做的很出色。</p>

<p>首先推荐一个在线的markdown网站<a href="http://dillinger.io/">dillinger.io</a>,能够实时根据markdown生成排版后的样式，非常方便。而且网站还能对编写的内容进行保存，就算浏览器crash后再打开所写的东西也不会丢失，非常人性化。网站还能和github、dropbox连接，直接保存到github和dropbox上，很方便。sublime编辑器上也能装markdown插件来方便操作，比如<a href="http://ttscoff.github.io/MarkdownEditing/">markdownediting</a>。</p>

<p>对于学习markdown语法推荐<a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">markdown cheatsheet</a>,简洁清楚的英文教程。<a href="http://wowubuntu.com/markdown/">markdown语法说明</a>是个中文的教程，更加详细。使用markdown语法时对table的解析有点问题，直接嵌入HTML的table代码倒没有任何问题。也不建议在排版中使用Horizontal Rule，因为octopress已经利用了这来分割不同文章，如果再在排版中使用会使blog整个排版非常散乱。</p>

<p>要上图的话建议上传到其他网站再用链接读图。不建议直接放到images文件夹里，因为github免费空间是有限的。国内把flickr和instagram都墙了，尤其是flickr网站能上图片无法载入，非常奇葩。</p>
]]></content>
  </entry>
  
</feed>
