<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Icemelon]]></title>
  <link href="http://ice-melon.github.io/atom.xml" rel="self"/>
  <link href="http://ice-melon.github.io/"/>
  <updated>2013-08-27T22:32:21+08:00</updated>
  <id>http://ice-melon.github.io/</id>
  <author>
    <name><![CDATA[icemelon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[objective-c中protocol的运用]]></title>
    <link href="http://ice-melon.github.io/blog/2013/08/27/objectivtocolde-yun-yong/"/>
    <updated>2013-08-27T21:30:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/08/27/objectivtocolde-yun-yong</id>
    <content type="html"><![CDATA[<p>不废话放大招，protocol一句话攻略：</p>

<pre><code>等于JAVA中的interface
</code></pre>

<p><a href="https://developer.apple.com/library/mac/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/WorkingwithProtocols/WorkingwithProtocols.html">Mac Developer Library</a> 上的精炼解释：</p>

<pre>
    A class interface declares the methods and properties associated with that class. 
    A protocol, by contrast, is used to declare methods and properties that are independent of any specific class.
</pre>


<p>像C++和Ruby都实现了多重继承，既一个class能拥有多个superclass；而objective-c和java等语言中的class只能严格拥有一个superclass类。在objective-c中我们用<code>@protocal</code>来实现多重继承的能力。
语法直接看<a href="https://developer.apple.com/library/mac/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/WorkingwithProtocols/WorkingwithProtocols.html">Mac Developer Library 上的定义</a>，人家苹果写文档都通过一个律师事务所的例子把为什么要在面向对象语言中实现protocol原因给你讲清楚了，是敬业啊！</p>

<p>我这里讲一下运用protocol实现MVC中的delegate方法，因为view和control是不能直接通信的，要使用delegate。mvc以后有空写写，google关于mvc的图片，大部分都是有错误的，很多图居然在view和model间直接加了箭头。view和model怎么能通信呢，起码要通过control才行啊。</p>

<p>比如在 view：FaceView和control：FaceViewControl中，我们要在view中取得一个存在control中的数据。我们不能直接从control中拿，而是要定义一个delegate方法。
在FaceView的头文件中我们可以这么定义</p>

<pre>
    @class FaceView;

    @protocol FaceViewDataSource
    - (float)smileForFaceView:(FaceView *)sender;
    @end

    @interface FaceView : UIView
    @property (nonatomic, weak) IBOutlet id <FaceViewDataSource> dataSource;
    @end
</pre>


<p>可以看到@protocol中我们定义了个instance method，将FaceView自己作为参数，返回一个float的返回值。而且在@inferface里面定义了一个类型为id的叫dataSource的@property，dataSource还实现了FaceViewDataSource这个protocol。所以dataSource实际上就是control，control中实现了smileForFaceView这个方法。我们就可以再FaveView.m里面通过</p>

<pre><code>float haha =[self.dataSource smileForFaceView:self]；
</code></pre>

<p>这样的方式来获取control中的信息。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pick a random element from a long array]]></title>
    <link href="http://ice-melon.github.io/blog/2013/08/24/pick-a-random-element-from-a-long-array/"/>
    <updated>2013-08-24T22:53:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/08/24/pick-a-random-element-from-a-long-array</id>
    <content type="html"><![CDATA[<p>Suppose you have an array of n elemnets and you have to pick an element randomly. It is easy that you just pick each element with probability 1/n.</p>

<p>While if you don&rsquo;t know the size of the array, you receive the element one at a time. How to pick the element? In theory you could wait for all elements to come and compute the probility. But the stream may be too large to be stored in memory, which makes it infeasible. We want an algorithm that we do not have to store the elements and look at the elements twice.</p>

<p>Here comes the solution:</p>

<pre><code>1.Choose the first element with probability 1
2.Replace the first element with the second element, with probability 1/2
3.Replace the current element with the third element, with probability 1/3
4.Continue doing this until the stream ends.
</code></pre>

<p>Let&rsquo;s prove the correctness by induction:</p>

<pre><code>Suppose that after seeing n-1 elements, each of the first n-1 elements is chosen with equal probability.  
When you see the nth element, it is chosen with probability 1/n, and each of the other elements is chosen
with probability [1/(n-1)] * [(n-1) / n] = 1/n. 
Therefore all elements are chosen with equal probability.
</code></pre>

<p>The algorithm takes O(1) space and O(n) time, which is quite simple and beautiful.
For more information, see <a href="http://en.wikipedia.org/wiki/Reservoir_sampling">Reservior sample</a> on Wikipedia.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[People don’t buy what u do,they buy why U do]]></title>
    <link href="http://ice-melon.github.io/blog/2013/08/08/people-dont-buy-what-u-do-they-buy-why-u-do/"/>
    <updated>2013-08-08T23:03:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/08/08/people-dont-buy-what-u-do-they-buy-why-u-do</id>
    <content type="html"><![CDATA[<p>Several days ago, I waked up at 6 am and happened to watch a TED talk <a href="http://blog.ted.com/2010/05/04/how_great_leade/">&ldquo;How great leaders inspire action&rdquo;</a>. I was attracted by the speaker&rsquo;s terse idea and comfortable articulate  pronunciation.</p>

<p>The speaker,<a href="http://www.twitter.com/simonsinek">Simon Sinek</a>, is a brilliant marketing consultant and author of <a href="http://www.amazon.com/Start-Why-Leaders-Inspire-Everyone/dp/1591842808?tag=jasonwiener-20">Start of Why</a>. He believes  that all great organizations think, act, and communicate in the exact same way — and this is opposite of how most of us think, act, and communicate. He believes great companies and leaders communicate and inspire with a methodology he calls The Golden Circle.</p>

<p>Here is the example of Golden Circle.</p>

<blockquote><p>  If Apple were like everyone else their marketing message would be, “We make great computers. They are beautifully designed, simple to use, and user-friendly. Want to buy one?”</p>

<p>  However, this is how Apple actually communicates, “In everything we do we believe in challenging the status quo. We believe in thinking differently. The way we challenge the status quo is by making our products beautifully designed, simple to use, and user-friendly. We just happen to make great computers. Want to buy one?”</p></blockquote>

<p><img src="http://t1.baidu.com/it/u=1276415570,1783171753&amp;fm=21&amp;gp=0.jpg" title="Logo 1" alt="" /></p>

<p>Every person  knows <em>what</em> they do and some people know <em>how</em> to do it better, which may be service and skill. But only very few know <em>why</em> they do what they do. As the golden circle diagram showed, all great organizations
and people think inside out the diagram.</p>

<p>The goal is not to do business with people need what you have. The goal is to do business with people believe with what you believe. The first 2.5% of population are innovators; The next 13.5% people are early adopters.
The propagation law tells us if you want mass-market success or mass-market acceptance of  an idea, you can&rsquo;t have it until you achieve the tipping poin between 15% and 18%. Most of population just follow what others do.</p>

<p>When first generation of iphone came out, why so many people wait many hours to buy a iphone? Because these people believe what Apple believes. The innovators and early adoptors feel comfortable to make intuitive decisions that are driven by what their believe about the world and not just what product is available.</p>

<p>Recommend to watch the <a href="http://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action.html">talk</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sublime text2 build 设置]]></title>
    <link href="http://ice-melon.github.io/blog/2013/08/07/sublime-text2-build-she-zhi/"/>
    <updated>2013-08-07T18:11:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/08/07/sublime-text2-build-she-zhi</id>
    <content type="html"><![CDATA[<p>sublime text2 是一款优秀的编辑器，在mac，linux，window平台上都能用。sublime平台拥有很多优秀的插件，而且安装非常方便。</p>

<pre><code>command + shift+ p
</code></pre>

<p>能够召唤出强大无比的命令行，让你摆脱鼠标，摆脱一大波需要记的快捷键。官方网站上有<a href="https://tutsplus.com/course/improve-workflow-in-sublime-text-2/">视频教程</a>，教程看起来非常赏心悦目，是的，赏心悦目。</p>

<p>Mac平台下sublime没有预设C的build配置，虽然直接用C++（据说国内某大型清新约炮网站有一程序萌妹子，人称C++）编译也行，但总归不舒服。stackoverflow等社区也没现成的方法，遂查了下sublime的<a href="http://docs.sublimetext.info/en/latest/reference/build_systems.html">build配置方法</a>,是熟悉的JSON结构。</p>

<p>下面是mac下面编译与运行一起执行的配置方法，并且能使编译时的错误一起到sublime里。</p>

<pre>
{
    "cmd" : ["gcc",  "-o", "$file_base_name", "$file_name"],
    "selector" : "source.c",
    "shell" : false,
    "working_dir" : "$file_path"
}
</pre>


<p>cmd就是执行的命令。尝试用</p>

<pre><code>gcc -o test test.c &amp;&amp; ./test
</code></pre>

<p>来编译和运行，发现sublime无法对&amp;&amp;进行解析。之后尝试使用两个cmd指令，发现只有第二个cmd是有效的。所以光配置sublime是无法达到一个build同时完成编译和运行的任务。要达成这个目的得翻阅zsh的文档自己写个能传参的命令，并且能输出gcc编译的结果和代码运行结果。
selector属性是选择自动build时候，当文件后缀是.c的时候自动选择这个build文件。</p>

<p>顺便记下windows平台下配置方法,还没测试过。</p>

<pre>
{
  "cmd" : ["gcc", "$file_name", "-o", "${file_base_name}.exe", "&&", "${file_base_name}.exe"],
  "selector" : "source.c",
  "shell" : true,
  "working_dir" : "$file_path"
}
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何快速学习markdown写博客]]></title>
    <link href="http://ice-melon.github.io/blog/2013/07/29/test/"/>
    <updated>2013-07-29T23:07:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/07/29/test</id>
    <content type="html"><![CDATA[<p>花了一个小时用octopress搭建了blog,托管在github之上。网上有很多在github上的搭建blog的教程，好处是不用自己租服务器,速度也能得到保证。octopress还有很多<a href="http://opthemes.com/">主题</a>，使用起来非常方便，几句命令就能搞定。octopress对屏幕大小适应性非常强，我尝试不断调整页面大小，blog的排版一直很优秀，一些UI的小细节做的很出色。</p>

<p>首先推荐一个在线的markdown网站<a href="http://dillinger.io/">dillinger.io</a>,能够实时根据markdown生成排版后的样式，非常方便。而且网站还能对编写的内容进行保存，就算浏览器crash后再打开所写的东西也不会丢失，非常人性化。网站还能和github、dropbox连接，直接保存到github和dropbox上，很方便。sublime编辑器上也能装markdown插件来方便操作，比如<a href="http://ttscoff.github.io/MarkdownEditing/">markdownediting</a>。</p>

<p>对于学习markdown语法推荐<a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">markdown cheatsheet</a>,简洁清楚的英文教程。<a href="http://wowubuntu.com/markdown/">markdown语法说明</a>是个中文的教程，更加详细。使用markdown语法时对table的解析有点问题，直接嵌入HTML的table代码倒没有任何问题。也不建议在排版中使用Horizontal Rule，因为octopress已经利用了这来分割不同文章，如果再在排版中使用会使blog整个排版非常散乱。</p>

<p>要上图的话建议上传到其他网站再用链接读图。不建议直接放到images文件夹里，因为github免费空间是有限的。国内把flickr和instagram都墙了，尤其是flickr网站能上图片无法载入，非常奇葩。</p>
]]></content>
  </entry>
  
</feed>
