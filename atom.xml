<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Icemelon]]></title>
  <link href="http://ice-melon.github.io/atom.xml" rel="self"/>
  <link href="http://ice-melon.github.io/"/>
  <updated>2013-11-20T21:35:37+08:00</updated>
  <id>http://ice-melon.github.io/</id>
  <author>
    <name><![CDATA[icemelon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[block in objective-C]]></title>
    <link href="http://ice-melon.github.io/blog/2013/09/09/block-in-objective-c/"/>
    <updated>2013-09-09T12:26:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/09/09/block-in-objective-c</id>
    <content type="html"><![CDATA[<h2>定义</h2>

<p>block实际上就是ruby，python等语言中的<a href="http://en.wikipedia.org/wiki/Closure_(computer_science)">闭包（closure）</a>,维基百科对closure的定义如下：</p>

<blockquote><p>a closure is a function or reference to a function together with a referencing environment—a table storing a reference to each of the non-local variables  of that function.</p></blockquote>

<p>就是说闭包其实是函数或者函数指针和一个table的组合，这个table里面储存了函数中使用的自由变量。自由变量是在外部创造出来的，但和函数是好基友，一辈子不分离。block是一个标准的objective-c对象，可以作为参数传递，可以作为方法返回值，可以赋值给变量。</p>

<p>这里有篇<a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/">分析objective-c block实现的文章</a>，可以看到block数据结构中复制了自由变量。</p>

<h2>语法</h2>

<p><img src="https://developer.apple.com/library/IOS/documentation/Cocoa/Conceptual/Blocks/Art/blocks.jpg" alt="IOS Dev Library对block语法的解释" /></p>

<h4>声明block的格式如下:</h4>

<p><code>typedef return_type (^block_type)(param_type, param_type, ...)</code></p>

<p>^表示block的开始，注意我们不需要参数的名称。</p>

<h4>定义block的格式如下：</h4>

<p><code>^(param_type param_name, param_type param_name, ...) { ... return return_type; }</code>
这里我们看到参数类型和参数名都要包含进去。</p>

<h4>用法</h4>

<p>声明格式里面block_type是变量类型，例如我们一个block类型</p>

<p><code>typedef double (^unary_operation_t)(double op);</code></p>

<p>然后声明一个类型是unary_operation_t的变量</p>

<p><code>unary_operation_t square;</code></p>

<p>而后给square赋值</p>

<p><code>square = ^(double operand) { return operand * operand; }</code></p>

<p>最后要这样用square变量</p>

<p><code>double squareOfFive = square(5.0);</code></p>

<p>以上步骤可以简化为:</p>

<p><code>double (^square)(double op) = ^(double op) { return op * op; };</code>
<code>double squareOfFive = square(5.0);</code></p>

<p>实际上简略了声明一个type的步骤</p>

<h4>其他简化用法</h4>

<p>1.如果一个block是method的参数，会立即被使用，那么将会省略typedef和block_type</p>

<p><code>- (void)enumerateKeysAndObjectsUsingBlock:(void (^)(id key, id obj, BOOL *stop))block;</code></p>

<p>完整的写法是
<code>typedef void (^enumeratingBlock)(id key, id obj, BOOL *stop);</code></p>

<p>2.如果能从return中猜测出返回值的类型，return_type也可以省略</p>

<p>3.如果没有参数，那省略小括号也是合法的</p>

<p><code>^() { ... }</code>可以写成<code>^{...}</code></p>

<h2>Memory Cycle</h2>

<p>block给每个在block中使用的自由变量维护了个strong类型的指针。如果block里面引用了包含block的类那就非常麻烦。举个栗子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSArray</span> <span class="o">*</span><span class="n">myBlocks</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">myBlocks</span> <span class="nl">addObject:</span><span class="o">^</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>self对NSArray中的每个block都维护了个strong类型的指针，而block内部又维护了self对象的指针。这就导致self和block都无法从heap中释放，因为referene count永远都不会是0.</p>

<p>但我们可以通过设置weak指针的方法避免这问题</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__weak</span> <span class="n">MyClass</span> <span class="o">*</span><span class="n">weakSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">myBlocks</span> <span class="nl">addObject:</span><span class="o">^</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">weakSelf</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>block在ios中的作用</h2>

<p>1.Enumeration</p>

<p>2.View Animations (more on that later in the course)</p>

<p>3.Sorting (sort this thing using a block as the comparison method) Notification (when something happens, execute this block)</p>

<p>4.Error handlers (if an error happens while doing this, execute this block)</p>

<p>5.Completion handlers (when you are done doing this, execute this block)</p>

<h3>And a super-important use: Multithreading With Grand Central Dispatch (GCD) API</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为octopress添加侧栏分享工具]]></title>
    <link href="http://ice-melon.github.io/blog/2013/08/31/wei-octopresstian-jia-ce-lan-fen-xi-gong-ju/"/>
    <updated>2013-08-31T01:18:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/08/31/wei-octopresstian-jia-ce-lan-fen-xi-gong-ju</id>
    <content type="html"><![CDATA[<p>Ocotopress 已经集成了twitter，脸书等第三方分析链接，只要在_config.yml里配置能搞定。但墙内没人用这些啊，怎么才能高大上？不慎写了鸡汤文读者要分分钟分享到朋友圈才行，吟诗调侃了薛必群老财主读者能够转到weibo里。如果还有小众读者觉得博主写得好想分享到有道笔记等网站，博主也要贴心服务满足读者需求才行。</p>

<p>在<a href="http://meditic.com/game-of-wild-beast/">meditic</a>的博客里发现了<a href="http://www.jiathis.com/">jiathis</a>这个工具，很全面，里面还有你找不到的分享平台吗？话不多说过程如下。</p>

<p>首先嵌入jiathis的代码，修改<code>source/_include/post/sharing.html</code>，在最后一行的<code>&lt;/div&gt;</code>前加入如下代码</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://v3.jiathis.com/code/jiathis_r.js?uid=1374762077227410&amp;move=0&quot;</span>
</span><span class='line'> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在_config.yml中添加jiathis，在文件末尾添加就可</p>

<pre><code>#jianthis
jianthis:true
</code></pre>

<p>以后不想开分享只要改成false就可。</p>

<p>试了jiathis几种分析方式，只有这个能不改代码完美契合octopress的布局，而且分享图标也最为清爽，不建议再去jianthis网站定制。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[objective-c中protocol的运用]]></title>
    <link href="http://ice-melon.github.io/blog/2013/08/27/objectivtocolde-yun-yong/"/>
    <updated>2013-08-27T21:30:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/08/27/objectivtocolde-yun-yong</id>
    <content type="html"><![CDATA[<h2>protocol是什么</h2>

<p>不废话放大招，protocol一句话攻略：</p>

<pre><code>等于JAVA中的interface
</code></pre>

<p><a href="https://developer.apple.com/library/mac/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/WorkingwithProtocols/WorkingwithProtocols.html">Mac Developer Library</a> 上的精炼解释：</p>

<p>A class interface declares the methods and properties associated with that class.
A protocol, by contrast, is used to declare methods and properties that are independent of any specific class.</p>

<p>像C++和Ruby都实现了多重继承，既一个class能拥有多个superclass；而objective-c和java等语言中的class只能严格拥有一个superclass类。在objective-c中我们用<code>@protocal</code>来实现多重继承的能力。
语法直接看<a href="https://developer.apple.com/library/mac/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/WorkingwithProtocols/WorkingwithProtocols.html">Mac Developer Library 上的定义</a>，苹果写档里通过一个律师事务所的例子把为什么要在面向对象语言中实现protocol原因给讲清楚了，文档也oop！</p>

<h2>用protocol实现view与controll的通信</h2>

<p>view和control是不能直接通信的，要使用delegate方法。题外话google了关于mvc的图片，大部分都是有错误的，很多图居然在view和model间直接加了箭头。</p>

<p>例如在 view：FaceView和control：FaceViewControl中，我们要在FaceView中取得一个只存在于FaceViewControl中的数据。view中是不能存数据的，我们也不能为control定义公有方法直接拿，而是要为view定义一个protocol，让control实现这个protocol从而实现delegate。
详细过程如下：</p>

<p>首先在FaceView.h中我们可以这么定义</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@class</span> <span class="nc">FaceView</span>;
</span><span class='line'>
</span><span class='line'><span class="k">@protocol</span> <span class="nc">FaceViewDataSource</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="nf">smileForFaceView:</span><span class="p">(</span><span class="n">FaceView</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">FaceView</span> : <span class="nc">UIView</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="kt">id</span> <span class="o">&lt;</span><span class="n">FaceViewDataSource</span><span class="o">&gt;</span> <span class="n">dataSource</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>@class有什么意义呢？在smileForFaceView方法中的参数(FaceView *)sender是一个指向FaceView对象的指针。但是FaceView是未定义的对象名，由于objective-c是c的拓展，c中用到的所有自定义类型都得在之前定义过，所以得用@class先向compiler声明程序会在后面实现FaceView这个对象。
protocol中的方法将FaceView自己作为参数，返回一个float的返回值。而且在@inferface里面定义了一个类型为id的叫dataSource的@property，dataSource还实现了FaceViewDataSource这个protocol。所以dataSource实际上就是control，control中实现了smileForFaceView这个方法。我们就可以再FaceView.m里面通过</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">float</span> <span class="n">haha</span> <span class="o">=</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">dataSource</span> <span class="nl">smileForFaceView:</span><span class="n">self</span><span class="p">]</span><span class="err">；</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的方式来获取control中的信息。</p>

<p>而后我们需要在FaceViewControl.m中实现一个FaceView的property，并且将Faceview中的dataSource设为FaceViewControl自己；</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">interface</span> <span class="n">HappinessViewController</span><span class="p">()</span> <span class="o">&lt;</span><span class="n">FaceViewDataSource</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">FaceView</span> <span class="o">*</span><span class="n">faceView</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">HappinessViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">faceView</span> <span class="o">=</span> <span class="n">_faceView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setFaceView:</span><span class="p">(</span><span class="n">FaceView</span> <span class="o">*</span><span class="p">)</span><span class="nv">faceView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">_faceView</span> <span class="o">=</span> <span class="n">faceView</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">faceView</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>别忘了在storyboard中将FaceViewControl与Faceview链接起来，不然control不会知道FaceView对象在哪里，双方就没办法通信。</p>

<h2>最后总结下实现delegate的步骤：</h2>

<ol>
<li><p>Create the @protocol</p></li>
<li><p>Add delegate @property to delegator’s public @interface</p></li>
<li><p>Use delegate property inside delegator’s implementation</p></li>
<li><p>Set the delegate property somewhere inside the delegate’s @implementation</p></li>
<li><p>Implement the protocol’s method(s) in the delegate (include &lt;> on @interface)</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pick a random element from a long array]]></title>
    <link href="http://ice-melon.github.io/blog/2013/08/24/pick-a-random-element-from-a-long-array/"/>
    <updated>2013-08-24T22:53:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/08/24/pick-a-random-element-from-a-long-array</id>
    <content type="html"><![CDATA[<p>Suppose you have an array of n elemnets and you have to pick an element randomly. It is easy that you just pick each element with probability 1/n.</p>

<p>While if you don&rsquo;t know the size of the array, you receive the element one at a time. How to pick the element? In theory you could wait for all elements to come and compute the probility. But the stream may be too large to be stored in memory, which makes it infeasible. We want an algorithm that we do not have to store the elements and look at the elements twice.</p>

<p>Here comes the solution:</p>

<pre><code>1.Choose the first element with probability 1
2.Replace the first element with the second element, with probability 1/2
3.Replace the current element with the third element, with probability 1/3
4.Continue doing this until the stream ends.
</code></pre>

<p>Let&rsquo;s prove the correctness by induction:</p>

<p>Suppose that after seeing n-1 elements, each of the first n-1 elements is chosen with equal probability.<br/>
When you see the nth element, it is chosen with probability 1/n, and each of the other elements is chosen
with probability [1/(n-1)] * [(n-1) / n] = 1/n. Therefore all elements are chosen with equal probability.</p>

<p>The algorithm takes O(1) space and O(n) time, which is quite simple and beautiful.
For more information, see <a href="http://en.wikipedia.org/wiki/Reservoir_sampling">Reservior sample</a> on Wikipedia.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[People don’t buy what u do,they buy why U do]]></title>
    <link href="http://ice-melon.github.io/blog/2013/08/08/people-dont-buy-what-u-do-they-buy-why-u-do/"/>
    <updated>2013-08-08T23:03:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/08/08/people-dont-buy-what-u-do-they-buy-why-u-do</id>
    <content type="html"><![CDATA[<p>Several days ago, I waked up at 6 am and happened to watch a TED talk <a href="http://blog.ted.com/2010/05/04/how_great_leade/">&ldquo;How great leaders inspire action&rdquo;</a>. I was attracted by the speaker&rsquo;s terse idea and comfortable articulate  pronunciation.</p>

<p>The speaker,<a href="http://www.twitter.com/simonsinek">Simon Sinek</a>, is a brilliant marketing consultant and author of <a href="http://www.amazon.com/Start-Why-Leaders-Inspire-Everyone/dp/1591842808?tag=jasonwiener-20">Start of Why</a>. He believes  that all great organizations think, act, and communicate in the exact same way — and this is opposite of how most of us think, act, and communicate. He believes great companies and leaders communicate and inspire with a methodology he calls The Golden Circle.</p>

<p>Here is the example of Golden Circle.</p>

<blockquote><p>  If Apple were like everyone else their marketing message would be, “We make great computers. They are beautifully designed, simple to use, and user-friendly. Want to buy one?”</p>

<p>  However, this is how Apple actually communicates, “In everything we do we believe in challenging the status quo. We believe in thinking differently. The way we challenge the status quo is by making our products beautifully designed, simple to use, and user-friendly. We just happen to make great computers. Want to buy one?”</p></blockquote>

<p><img src="http://t1.baidu.com/it/u=1276415570,1783171753&amp;fm=21&amp;gp=0.jpg" title="Logo 1" alt="" /></p>

<p>Every person  knows <em>what</em> they do and some people know <em>how</em> to do it better, which may be service and skill. But only very few know <em>why</em> they do what they do. As the golden circle diagram showed, all great organizations
and people think inside out the diagram.</p>

<p>The goal is not to do business with people need what you have. The goal is to do business with people believe with what you believe. The first 2.5% of population are innovators; The next 13.5% people are early adopters.
The propagation law tells us if you want mass-market success or mass-market acceptance of  an idea, you can&rsquo;t have it until you achieve the tipping poin between 15% and 18%. Most of population just follow what others do.</p>

<p>When first generation of iphone came out, why so many people wait many hours to buy a iphone? Because these people believe what Apple believes. The innovators and early adoptors feel comfortable to make intuitive decisions that are driven by what their believe about the world and not just what product is available.</p>

<p>Recommend to watch the <a href="http://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action.html">talk</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sublime text2 build 设置]]></title>
    <link href="http://ice-melon.github.io/blog/2013/08/07/sublime-text2-build-she-zhi/"/>
    <updated>2013-08-07T18:11:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/08/07/sublime-text2-build-she-zhi</id>
    <content type="html"><![CDATA[<p>sublime text2 是一款优秀的编辑器，在mac，linux，window平台上都能用。sublime平台拥有很多优秀的插件，而且安装非常方便。</p>

<pre><code>command + shift+ p
</code></pre>

<p>能够召唤出强大无比的命令行，让你摆脱鼠标，摆脱一大波需要记的快捷键。官方网站上有<a href="https://tutsplus.com/course/improve-workflow-in-sublime-text-2/">视频教程</a>，教程看起来非常赏心悦目，是的，赏心悦目。</p>

<p>Mac平台下sublime没有预设C的build配置，虽然直接用C++（据说国内某大型清新约炮网站有一程序萌妹子，人称C++）编译也行，但总归不舒服。stackoverflow等社区也没现成的方法，遂查了下sublime的<a href="http://docs.sublimetext.info/en/latest/reference/build_systems.html">build配置方法</a>,是熟悉的JSON结构。</p>

<p>下面是mac下面编译与运行一起执行的配置方法，并且能使编译时的错误一起到sublime里。</p>

<pre>
{
    "cmd" : ["gcc",  "-o", "$file_base_name", "$file_name"],
    "selector" : "source.c",
    "shell" : false,
    "working_dir" : "$file_path"
}
</pre>


<p>cmd就是执行的命令。尝试用</p>

<pre><code>gcc -o test test.c &amp;&amp; ./test
</code></pre>

<p>来编译和运行，发现sublime无法对&amp;&amp;进行解析。之后尝试使用两个cmd指令，发现只有第二个cmd是有效的。所以光配置sublime是无法达到一个build同时完成编译和运行的任务。要达成这个目的得翻阅zsh的文档自己写个能传参的命令，并且能输出gcc编译的结果和代码运行结果。
selector属性是选择自动build时候，当文件后缀是.c的时候自动选择这个build文件。</p>

<p>顺便记下windows平台下配置方法,还没测试过。</p>

<pre>
{
  "cmd" : ["gcc", "$file_name", "-o", "${file_base_name}.exe", "&&", "${file_base_name}.exe"],
  "selector" : "source.c",
  "shell" : true,
  "working_dir" : "$file_path"
}
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何快速学习markdown写博客]]></title>
    <link href="http://ice-melon.github.io/blog/2013/07/29/test/"/>
    <updated>2013-07-29T23:07:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/07/29/test</id>
    <content type="html"><![CDATA[<p>花了一个小时用octopress搭建了blog,托管在github之上。网上有很多在github上的搭建blog的教程，好处是不用自己租服务器,速度也能得到保证。octopress还有很多<a href="http://opthemes.com/">主题</a>，使用起来非常方便，几句命令就能搞定。octopress对屏幕大小适应性非常强，我尝试不断调整页面大小，blog的排版一直很优秀，一些UI的小细节做的很出色。</p>

<p>首先推荐一个在线的markdown网站<a href="http://dillinger.io/">dillinger.io</a>,能够实时根据markdown生成排版后的样式，非常方便。而且网站还能对编写的内容进行保存，就算浏览器crash后再打开所写的东西也不会丢失，非常人性化。网站还能和github、dropbox连接，直接保存到github和dropbox上，很方便。sublime编辑器上也能装markdown插件来方便操作，比如<a href="http://ttscoff.github.io/MarkdownEditing/">markdownediting</a>。</p>

<p>对于学习markdown语法推荐<a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">markdown cheatsheet</a>,简洁清楚的英文教程。<a href="http://wowubuntu.com/markdown/">markdown语法说明</a>是个中文的教程，更加详细。使用markdown语法时对table的解析有点问题，直接嵌入HTML的table代码倒没有任何问题。也不建议在排版中使用Horizontal Rule，因为octopress已经利用了这来分割不同文章，如果再在排版中使用会使blog整个排版非常散乱。</p>

<p>要上图的话建议上传到其他网站再用链接读图。不建议直接放到images文件夹里，因为github免费空间是有限的。国内把flickr和instagram都墙了，尤其是flickr网站能上图片无法载入，非常奇葩。</p>
]]></content>
  </entry>
  
</feed>
