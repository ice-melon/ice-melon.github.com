<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Icemelon]]></title>
  <link href="http://ice-melon.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://ice-melon.github.io/"/>
  <updated>2013-09-06T11:10:52+08:00</updated>
  <id>http://ice-melon.github.io/</id>
  <author>
    <name><![CDATA[icemelon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[objective-c中protocol的运用]]></title>
    <link href="http://ice-melon.github.io/blog/2013/08/27/objectivtocolde-yun-yong/"/>
    <updated>2013-08-27T21:30:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/08/27/objectivtocolde-yun-yong</id>
    <content type="html"><![CDATA[<h2>protocol是什么</h2>

<p>不废话放大招，protocol一句话攻略：</p>

<pre><code>等于JAVA中的interface
</code></pre>

<p><a href="https://developer.apple.com/library/mac/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/WorkingwithProtocols/WorkingwithProtocols.html">Mac Developer Library</a> 上的精炼解释：</p>

<p>A class interface declares the methods and properties associated with that class.
A protocol, by contrast, is used to declare methods and properties that are independent of any specific class.</p>

<p>像C++和Ruby都实现了多重继承，既一个class能拥有多个superclass；而objective-c和java等语言中的class只能严格拥有一个superclass类。在objective-c中我们用<code>@protocal</code>来实现多重继承的能力。
语法直接看<a href="https://developer.apple.com/library/mac/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/WorkingwithProtocols/WorkingwithProtocols.html">Mac Developer Library 上的定义</a>，苹果写档里通过一个律师事务所的例子把为什么要在面向对象语言中实现protocol原因给讲清楚了，文档也oop！</p>

<h2>用protocol实现view与controll的通信</h2>

<p>view和control是不能直接通信的，要使用delegate方法。题外话google了关于mvc的图片，大部分都是有错误的，很多图居然在view和model间直接加了箭头。</p>

<p>例如在 view：FaceView和control：FaceViewControl中，我们要在FaceView中取得一个只存在于FaceViewControl中的数据。view中是不能存数据的，我们也不能为control定义公有方法直接拿，而是要为view定义一个protocol，让control实现这个protocol从而实现delegate。
详细过程如下：</p>

<p>首先在FaceView.h中我们可以这么定义
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@class</span> <span class="nc">FaceView</span>;<span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@protocol</span> <span class="nc">FaceViewDataSource</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="nl">smileForFaceView:</span><span class="p">(</span><span class="n">FaceView</span> <span class="o">*</span><span class="p">)</span><span class="n">sender</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@interface</span> <span class="nc">FaceView</span> : <span class="nc">UIView</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="kt">id</span> <span class="o">&lt;</span><span class="n">FaceViewDataSource</span><span class="o">&gt;</span> <span class="n">dataSource</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
@class有什么意义呢？在smileForFaceView方法中的参数(FaceView *)sender是一个指向FaceView对象的指针。但是FaceView是未定义的对象名，由于objective-c是c的拓展，c中用到的所有自定义类型都得在之前定义过，所以得用@class先向compiler声明程序会在后面实现FaceView这个对象。
protocol中的方法将FaceView自己作为参数，返回一个float的返回值。而且在@inferface里面定义了一个类型为id的叫dataSource的@property，dataSource还实现了FaceViewDataSource这个protocol。所以dataSource实际上就是control，control中实现了smileForFaceView这个方法。我们就可以再FaceView.m里面通过
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">float</span> <span class="n">haha</span> <span class="o">=</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">dataSource</span> <span class="nl">smileForFaceView:</span><span class="n">self</span><span class="p">]</span><span class="err">；</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
这样的方式来获取control中的信息。</p>

<p>而后我们需要在FaceViewControl.m中实现一个FaceView的property，并且将Faceview中的dataSource设为FaceViewControl自己；
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">interface</span> <span class="n">HappinessViewController</span><span class="p">()</span> <span class="o">&lt;</span><span class="n">FaceViewDataSource</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">FaceView</span> <span class="o">*</span><span class="n">faceView</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">HappinessViewController</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@synthesize</span> <span class="n">faceView</span> <span class="o">=</span> <span class="n">_faceView</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setFaceView:</span><span class="p">(</span><span class="n">FaceView</span> <span class="o">*</span><span class="p">)</span><span class="n">faceView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">_faceView</span> <span class="o">=</span> <span class="n">faceView</span><span class="p">;</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">faceView</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
别忘了在storyboard中将FaceViewControl与Faceview链接起来，不然control不会知道FaceView对象在哪里，双方就没办法通信。</li>
</ul>


<h2>最后总结下实现delegate的步骤：</h2>

<ol>
<li><p>Create the @protocol</p></li>
<li><p>Add delegate @property to delegator’s public @interface</p></li>
<li><p>Use delegate property inside delegator’s implementation</p></li>
<li><p>Set the delegate property somewhere inside the delegate’s @implementation</p></li>
<li><p>Implement the protocol’s method(s) in the delegate (include &lt;> on @interface)</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
