<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 中文 | Icemelon]]></title>
  <link href="http://ice-melon.github.io/blog/categories/zhong-wen/atom.xml" rel="self"/>
  <link href="http://ice-melon.github.io/"/>
  <updated>2013-11-20T21:35:37+08:00</updated>
  <id>http://ice-melon.github.io/</id>
  <author>
    <name><![CDATA[icemelon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[block in objective-C]]></title>
    <link href="http://ice-melon.github.io/blog/2013/09/09/block-in-objective-c/"/>
    <updated>2013-09-09T12:26:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/09/09/block-in-objective-c</id>
    <content type="html"><![CDATA[<h2>定义</h2>

<p>block实际上就是ruby，python等语言中的<a href="http://en.wikipedia.org/wiki/Closure_(computer_science)">闭包（closure）</a>,维基百科对closure的定义如下：</p>

<blockquote><p>a closure is a function or reference to a function together with a referencing environment—a table storing a reference to each of the non-local variables  of that function.</p></blockquote>

<p>就是说闭包其实是函数或者函数指针和一个table的组合，这个table里面储存了函数中使用的自由变量。自由变量是在外部创造出来的，但和函数是好基友，一辈子不分离。block是一个标准的objective-c对象，可以作为参数传递，可以作为方法返回值，可以赋值给变量。</p>

<p>这里有篇<a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/">分析objective-c block实现的文章</a>，可以看到block数据结构中复制了自由变量。</p>

<h2>语法</h2>

<p><img src="https://developer.apple.com/library/IOS/documentation/Cocoa/Conceptual/Blocks/Art/blocks.jpg" alt="IOS Dev Library对block语法的解释" /></p>

<h4>声明block的格式如下:</h4>

<p><code>typedef return_type (^block_type)(param_type, param_type, ...)</code></p>

<p>^表示block的开始，注意我们不需要参数的名称。</p>

<h4>定义block的格式如下：</h4>

<p><code>^(param_type param_name, param_type param_name, ...) { ... return return_type; }</code>
这里我们看到参数类型和参数名都要包含进去。</p>

<h4>用法</h4>

<p>声明格式里面block_type是变量类型，例如我们一个block类型</p>

<p><code>typedef double (^unary_operation_t)(double op);</code></p>

<p>然后声明一个类型是unary_operation_t的变量</p>

<p><code>unary_operation_t square;</code></p>

<p>而后给square赋值</p>

<p><code>square = ^(double operand) { return operand * operand; }</code></p>

<p>最后要这样用square变量</p>

<p><code>double squareOfFive = square(5.0);</code></p>

<p>以上步骤可以简化为:</p>

<p><code>double (^square)(double op) = ^(double op) { return op * op; };</code>
<code>double squareOfFive = square(5.0);</code></p>

<p>实际上简略了声明一个type的步骤</p>

<h4>其他简化用法</h4>

<p>1.如果一个block是method的参数，会立即被使用，那么将会省略typedef和block_type</p>

<p><code>- (void)enumerateKeysAndObjectsUsingBlock:(void (^)(id key, id obj, BOOL *stop))block;</code></p>

<p>完整的写法是
<code>typedef void (^enumeratingBlock)(id key, id obj, BOOL *stop);</code></p>

<p>2.如果能从return中猜测出返回值的类型，return_type也可以省略</p>

<p>3.如果没有参数，那省略小括号也是合法的</p>

<p><code>^() { ... }</code>可以写成<code>^{...}</code></p>

<h2>Memory Cycle</h2>

<p>block给每个在block中使用的自由变量维护了个strong类型的指针。如果block里面引用了包含block的类那就非常麻烦。举个栗子：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSArray</span> <span class="o">*</span><span class="n">myBlocks</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">myBlocks</span> <span class="nl">addObject:</span><span class="o">^</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">self</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
self对NSArray中的每个block都维护了个strong类型的指针，而block内部又维护了self对象的指针。这就导致self和block都无法从heap中释放，因为referene count永远都不会是0.</p>

<p>但我们可以通过设置weak指针的方法避免这问题
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__weak</span> <span class="n">MyClass</span> <span class="o">*</span><span class="n">weakSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">myBlocks</span> <span class="nl">addObject:</span><span class="o">^</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">weakSelf</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>block在ios中的作用</h2>

<p>1.Enumeration</p>

<p>2.View Animations (more on that later in the course)</p>

<p>3.Sorting (sort this thing using a block as the comparison method) Notification (when something happens, execute this block)</p>

<p>4.Error handlers (if an error happens while doing this, execute this block)</p>

<p>5.Completion handlers (when you are done doing this, execute this block)</p>

<h3>And a super-important use: Multithreading With Grand Central Dispatch (GCD) API</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为octopress添加侧栏分享工具]]></title>
    <link href="http://ice-melon.github.io/blog/2013/08/31/wei-octopresstian-jia-ce-lan-fen-xi-gong-ju/"/>
    <updated>2013-08-31T01:18:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/08/31/wei-octopresstian-jia-ce-lan-fen-xi-gong-ju</id>
    <content type="html"><![CDATA[<p>Ocotopress 已经集成了twitter，脸书等第三方分析链接，只要在_config.yml里配置能搞定。但墙内没人用这些啊，怎么才能高大上？不慎写了鸡汤文读者要分分钟分享到朋友圈才行，吟诗调侃了薛必群老财主读者能够转到weibo里。如果还有小众读者觉得博主写得好想分享到有道笔记等网站，博主也要贴心服务满足读者需求才行。</p>

<p>在<a href="http://meditic.com/game-of-wild-beast/">meditic</a>的博客里发现了<a href="http://www.jiathis.com/">jiathis</a>这个工具，很全面，里面还有你找不到的分享平台吗？话不多说过程如下。</p>

<p>首先嵌入jiathis的代码，修改<code>source/_include/post/sharing.html</code>，在最后一行的<code>&lt;/div&gt;</code>前加入如下代码
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://v3.jiathis.com/code/jiathis_r.js?uid=1374762077227410&amp;move=0&quot;</span>
</span><span class='line'> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
然后在_config.yml中添加jiathis，在文件末尾添加就可</p>

<pre><code>#jianthis
jianthis:true
</code></pre>

<p>以后不想开分享只要改成false就可。</p>

<p>试了jiathis几种分析方式，只有这个能不改代码完美契合octopress的布局，而且分享图标也最为清爽，不建议再去jianthis网站定制。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sublime text2 build 设置]]></title>
    <link href="http://ice-melon.github.io/blog/2013/08/07/sublime-text2-build-she-zhi/"/>
    <updated>2013-08-07T18:11:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/08/07/sublime-text2-build-she-zhi</id>
    <content type="html"><![CDATA[<p>sublime text2 是一款优秀的编辑器，在mac，linux，window平台上都能用。sublime平台拥有很多优秀的插件，而且安装非常方便。</p>

<pre><code>command + shift+ p
</code></pre>

<p>能够召唤出强大无比的命令行，让你摆脱鼠标，摆脱一大波需要记的快捷键。官方网站上有<a href="https://tutsplus.com/course/improve-workflow-in-sublime-text-2/">视频教程</a>，教程看起来非常赏心悦目，是的，赏心悦目。</p>

<p>Mac平台下sublime没有预设C的build配置，虽然直接用C++（据说国内某大型清新约炮网站有一程序萌妹子，人称C++）编译也行，但总归不舒服。stackoverflow等社区也没现成的方法，遂查了下sublime的<a href="http://docs.sublimetext.info/en/latest/reference/build_systems.html">build配置方法</a>,是熟悉的JSON结构。</p>

<p>下面是mac下面编译与运行一起执行的配置方法，并且能使编译时的错误一起到sublime里。</p>

<pre>
{
    "cmd" : ["gcc",  "-o", "$file_base_name", "$file_name"],
    "selector" : "source.c",
    "shell" : false,
    "working_dir" : "$file_path"
}
</pre>


<p>cmd就是执行的命令。尝试用</p>

<pre><code>gcc -o test test.c &amp;&amp; ./test
</code></pre>

<p>来编译和运行，发现sublime无法对&amp;&amp;进行解析。之后尝试使用两个cmd指令，发现只有第二个cmd是有效的。所以光配置sublime是无法达到一个build同时完成编译和运行的任务。要达成这个目的得翻阅zsh的文档自己写个能传参的命令，并且能输出gcc编译的结果和代码运行结果。
selector属性是选择自动build时候，当文件后缀是.c的时候自动选择这个build文件。</p>

<p>顺便记下windows平台下配置方法,还没测试过。</p>

<pre>
{
  "cmd" : ["gcc", "$file_name", "-o", "${file_base_name}.exe", "&&", "${file_base_name}.exe"],
  "selector" : "source.c",
  "shell" : true,
  "working_dir" : "$file_path"
}
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何快速学习markdown写博客]]></title>
    <link href="http://ice-melon.github.io/blog/2013/07/29/test/"/>
    <updated>2013-07-29T23:07:00+08:00</updated>
    <id>http://ice-melon.github.io/blog/2013/07/29/test</id>
    <content type="html"><![CDATA[<p>花了一个小时用octopress搭建了blog,托管在github之上。网上有很多在github上的搭建blog的教程，好处是不用自己租服务器,速度也能得到保证。octopress还有很多<a href="http://opthemes.com/">主题</a>，使用起来非常方便，几句命令就能搞定。octopress对屏幕大小适应性非常强，我尝试不断调整页面大小，blog的排版一直很优秀，一些UI的小细节做的很出色。</p>

<p>首先推荐一个在线的markdown网站<a href="http://dillinger.io/">dillinger.io</a>,能够实时根据markdown生成排版后的样式，非常方便。而且网站还能对编写的内容进行保存，就算浏览器crash后再打开所写的东西也不会丢失，非常人性化。网站还能和github、dropbox连接，直接保存到github和dropbox上，很方便。sublime编辑器上也能装markdown插件来方便操作，比如<a href="http://ttscoff.github.io/MarkdownEditing/">markdownediting</a>。</p>

<p>对于学习markdown语法推荐<a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">markdown cheatsheet</a>,简洁清楚的英文教程。<a href="http://wowubuntu.com/markdown/">markdown语法说明</a>是个中文的教程，更加详细。使用markdown语法时对table的解析有点问题，直接嵌入HTML的table代码倒没有任何问题。也不建议在排版中使用Horizontal Rule，因为octopress已经利用了这来分割不同文章，如果再在排版中使用会使blog整个排版非常散乱。</p>

<p>要上图的话建议上传到其他网站再用链接读图。不建议直接放到images文件夹里，因为github免费空间是有限的。国内把flickr和instagram都墙了，尤其是flickr网站能上图片无法载入，非常奇葩。</p>
]]></content>
  </entry>
  
</feed>
